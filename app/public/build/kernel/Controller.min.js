import{Parser}from"/build/kernel/Parser.min.js";export class Controller{constructor(e={}){if(void 0===e.id)return console.error("You most give a id"),null;if(this.element=document.getElementById(e.id),void 0!==e.parent&&null!=document.getElementById(e.parent)?this.parent=e.parent:this.parent=null,e.name&&(this.name=e.name),this.id=e.id,this.classes=e.classes,this.isLoaded=!1,this.parser=new Parser({noData:e.onError||!1}),this.showOnLoad=!1,void 0!==e.showOnLoad&&(this.showOnLoad=e.showOnLoad),void 0!==e.view){if(0==this.updateView(e.view))return null}else void 0===globalThis.views&&(globalThis.views=[]),this.createDOM();if(!e.app)throw"Controller must be defined by Application class!";return this.app=e.app,e.url&&(this.url=e.url),this.onLoad(),this}init(){try{this.url?this.fetchView(this.url).then(e=>"string"==typeof e?this.loadView(e,this.url,!0):this.updateView(this.compileFromTree(e.tree))).catch(e=>console.error(e)):this.onViewLoaded()}catch(e){throw e}}updateView(e){return"string"!=typeof e?(console.error("View should be a string"),!1):this.updateDOM(e)}updateDOM(e){return null==this.element?!!this.createDOM()&&(this.isLoaded=!0,this.element=document.getElementById(this.id),this.element.innerHTML=e,this.onViewLoaded(),!0):(this.isLoaded=!0,this.element=document.getElementById(this.id),this.element.innerHTML=e,this.onViewLoaded(),!0)}createDOM(){return null==this.parent?(null==document.getElementById("content")&&(document.body.innerHTML=document.body.innerHTML+'<div id="content"></div>'),document.getElementById("content").innerHTML=document.getElementById("content").innerHTML+"<div id="+this.id+"></div>"):document.getElementById(this.parent).innerHTML=document.getElementById(this.parent).innerHTML+"<div id="+this.id+"></div>",this.element=document.getElementById(this.id),!(void 0!==this.classes&&!this.addClass(this.classes,!1))}onHide(){}onShow(){}show(e=!0,t=0){return this.element=document.getElementById(this.id),e?(this.onShow(),this.element.style.display="block"):this.element.style.display="none",this}getHTML(){return this.element.innerHTML}html(e){this.element.innerHTML=e}hide(e=0){return this.onHide(),this.show(!1,e)}toggle(e=100){return"none"==this.element.style.display?this.show(!0,e):this.hide(e),this}addClass(e,t=!0){return this.classes=e,null==this.element?(console.error("Id not found"),!1):"string"!=typeof e?(console.error("Classes should be a string"),!1):(this.element.classList.add(this.classes),!t||this)}refresh(){let e=globalThis.views.find(e=>e.url==this.url);return!!(globalThis.views.length>0&&e)&&(this.updateView(this.compileFromTree(e.tree)),this)}loadView(e,t,i=!1){let s=globalThis.views.find(e=>e.url==t);return globalThis.views.length>0&&s?(this.updateView(this.compileFromTree(s.tree)),this):i?(this.updateView(this.compileFromTree(JSON.parse(e),t)),this):(this.updateView(this.compile(e),t),this)}async fetchView(e){let t=globalThis.views.find(t=>t.url==e);if(globalThis.views.length>0&&t)return t;const i=await fetch(e);if(200==i.status)return i.text();throw`Can't fetch view, request status ${i.status}`}async view(e){if("string"!=typeof e)throw"Wrong URL";this.url=e,this.fetchView(e).then(t=>"string"==typeof t?this.loadView(t,e,!0).show():this.updateView(this.compileFromTree(t.tree))).catch(e=>console.error(e))}onViewLoaded(){return this.app&&this.name&&this.app.viewLoaded(this.name),this.onUpdate()}request(e,t,i){this.app.request(e,t,i)}compile(e,t){let i=this.parser.clear().makeTreeFromString(e);return t&&globalThis.views.push({url:t,tree:i}),this.parser.clear().parse(!1,this)}compileFromTree(e,t){return t&&globalThis.views.push({url:t,tree:e}),this.parser.clear().parse(e,this)}onUpdate(){console.info("Redefine me")}onLoad(){console.info("Redefine me")}}