export class Parser{constructor(e={}){this.tree=e.tree||[],this.result="",this.noData=e.noData||!1}parse(tree=!1,_this=!1){let t=this.tree[0];return tree&&(t=tree),0!=t.childs.length&&(_this&&(globalThis._this=_this),t.childs.forEach(child=>{if("text"!=child.type)if("variable"!=child.type){if("loop"==child.type){let params=child.childs.find(e=>"params"==e.type);if(!params)return void(this.result+=this.noData||"!Can't find params!");let arr=eval(params.value[0]),iteratorName=params.value[1];if("object"==typeof arr){let e=Object.keys(arr);return e.forEach(e=>(globalThis._loopIndex=e,globalThis[iteratorName]=arr[e],this.parse(child,_this))),delete globalThis[iteratorName],void delete globalThis._loopIndex}return Array.isArray(arr)?(arr.forEach((e,t)=>(globalThis._loopIndex=t,globalThis[iteratorName]=e,this.parse(child,_this))),delete globalThis[iteratorName],void delete globalThis._loopIndex):void(this.result+=this.noData||"!Wrong type of array!")}if("if"!=child.type);else{let params=child.childs.find(e=>"params"==e.type);if(!params)return void(this.result+=this.noData||"!Can't find params!");if(eval(params.value[0]))return this.parse(child,_this);{let e=child.childs.find(e=>"else"==e.type);if(e)return this.parse(e,_this)}}}else this.result+=eval(child.value);else this.result+=child.value}),delete globalThis._this,this.result)}clear(){return this.result="",this}setTree(e){return this.tree=e,this}getTree(){return this.tree}getResult(){return this.result}}