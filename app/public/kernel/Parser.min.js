export class Parser{constructor(e={}){this.tree=e.tree||[],this.result="",this.noData=e.noData||!1}parse(e=!1,t=!1,s=!1){let r=this.tree[0];return e&&(r=e),!(0==r.childs.length&&!s)&&(t&&(globalThis._this=t),r.childs.forEach(e=>{if("text"!=e.type)if("variable"!=e.type){if("loop"==e.type){let s=e.childs.find(e=>"params"==e.type);if(!s)return void(this.result+=this.noData||"!Can't find params!");let r=Function('"use strict";return ((_this) => {return '+s.value[0]+"})")()(t),i=s.value[1];if("object"==typeof r){return Object.keys(r).forEach(s=>(globalThis._loopIndex=s,globalThis[i]=r[s],this.parse(e,t))),delete globalThis[i],void delete globalThis._loopIndex}return Array.isArray(r)?(r.forEach((s,r)=>(globalThis._loopIndex=r,globalThis[i]=s,this.parse(e,t))),delete globalThis[i],void delete globalThis._loopIndex):void(this.result+=this.noData||"!Wrong type of array!")}if("if"!=e.type){if("noClosingTag"!==e.type)return"tag"===e.type?(this.result+="<"+e.value+">",this.parse(e,t,!0),void(this.result+="</"+e.value+" >")):void 0;this.result+="<"+e.value+" />"}else{let s=e.childs.find(e=>"params"==e.type);if(!s)return void(this.result+=this.noData||"!Can't find params!");if(Function('"use strict";return ((_this) => {return '+s.value[0]+"})")()(t))return this.parse(e,t);{let s=e.childs.find(e=>"else"==e.type);if(s)return this.parse(s,t)}}}else this.result+=Function('"use strict";return ((_this) => {return '+e.value+"})")()(t);else this.result+=e.value}),delete globalThis._this,this.result)}clear(){return this.result="",this}setTree(e){return this.tree=e,this}getTree(){return this.tree}getResult(){return this.result}}