upstream sockets {
	# hash $remote_addr;
	least_conn;
	server server_1:3030;
	server server_2:3030;
}

upstream pollings {
	hash $remote_addr;
	server server_polling_1:3030;
	server server_polling_2:3030;
}

upstream static {
	least_conn;
	server server_polling_1:80;
	server server_polling_2:80;
	server server_1:80;
	server server_2:80;
}

upstream api {
	least_conn;
	server server_polling_1:80;
	server server_polling_2:80;
	server server_1:80;
	server server_2:80;
}

upstream health {
	server server_polling_1:8001;
	server server_polling_2:8001;
	server server_1:8001;
	server server_2:8001;
}

server {
	listen 80;
	listen [::]:80;

	server_name localhost;

	error_log  /var/log/nginx/error.log;

	location /socket/ {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_pass http://sockets;
		# enable WebSockets
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location /polling/ {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_pass http://pollings;
	}

	# There is example how to separate http servers scopes
	location /api {
		return 302 /api/;
	}

	location /api/ {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_pass http://api/;
	}

	location /health {
		return 302 /health/;
	}

	location /health/ {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_pass http://health/;
	}

	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;
		proxy_pass http://static/;
	}
}